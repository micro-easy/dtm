// Code generated by goctl. DO NOT EDIT!
// Source: dtm.proto

//go:generate mockgen -destination ./dtm_mock.go -package dtmclient -source $GOFILE

package dtmclient

import (
	"context"

	"github.com/micro-easy/dtm/cmd/dtmrpc/dtm"

	"github.com/micro-easy/go-zero/zrpc"
)

type (
	PrepareReq  = dtm.PrepareReq
	PrepareResp = dtm.PrepareResp
	SubmitReq   = dtm.SubmitReq
	SubmitResp  = dtm.SubmitResp
	CheckReq    = dtm.CheckReq
	CheckResp   = dtm.CheckResp
	GenGidReq   = dtm.GenGidReq
	GenGidResp  = dtm.GenGidResp

	Dtm interface {
		GenGid(ctx context.Context, in *GenGidReq) (*GenGidResp, error)
		Prepare(ctx context.Context, in *PrepareReq) (*PrepareResp, error)
		Submit(ctx context.Context, in *SubmitReq) (*SubmitResp, error)
		Check(ctx context.Context, in *CheckReq) (*CheckResp, error)
	}

	defaultDtm struct {
		cli zrpc.Client
	}
)

func NewDtm(cli zrpc.Client) Dtm {
	return &defaultDtm{
		cli: cli,
	}
}

func (m *defaultDtm) GenGid(ctx context.Context, in *GenGidReq) (*GenGidResp, error) {
	client := dtm.NewDtmClient(m.cli.Conn())
	return client.GenGid(ctx, in)
}

func (m *defaultDtm) Prepare(ctx context.Context, in *PrepareReq) (*PrepareResp, error) {
	client := dtm.NewDtmClient(m.cli.Conn())
	return client.Prepare(ctx, in)
}

func (m *defaultDtm) Submit(ctx context.Context, in *SubmitReq) (*SubmitResp, error) {
	client := dtm.NewDtmClient(m.cli.Conn())
	return client.Submit(ctx, in)
}

func (m *defaultDtm) Check(ctx context.Context, in *CheckReq) (*CheckResp, error) {
	client := dtm.NewDtmClient(m.cli.Conn())
	return client.Check(ctx, in)
}
